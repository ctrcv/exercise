from typing import List
class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        # 题目中说明重复的数字的重复次数为2次

        # 使用O(n)的额外空间的话，实现O(n)复杂度可以有以下方法
        # 1. 使用集合遍历数组，集合中存在则删除该元素，最后剩余的元素即为只出现一次的数字
        # 2. 使用哈希表遍历统计元素出现的次数
        # 3. 使用集合存储数组中的数字，去除重复的数字，对集合的元素求和再乘以2得到s1；统计原始数组的所有元素和s2
        # 不重复的数字则等于s1 - s2

        # 时间复杂度O(nlogn)的方法可以使用排序

        # 不使用额外O(n)空间，只使用常数空间，则可以使用异或运算的方法
        # 原因是两个数字进行异或，如果两个数字相同，异或后的结果为0；a^a = 0
        # 0与任意数字异或的结果为该数字; a^0 = a
        # 异或满足交换律和结合律 a ^ b ^ = b ^ a ^ a = b ^ (a ^ a) = b ^ 0 = b
        a = 0
        for num in nums:
            a = a ^ num
        return a
